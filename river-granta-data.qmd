---
title: "River Granta data"
format: 
   html:
       toc: true
       toc-location: right
author: "Julian Flowers"
date: "`r Sys.Date()`"

editor: visual
execute: 
  cache: false
  echo: false
  message: false
  warning: false
  eval: false
---

## Catchment of the River Granta

From <https://environment.data.gov.uk/catchment-planning/WaterBody/GB105033037810>

```{r, eval=TRUE}

needs(mapview, sf, tidyverse)

mapviewOptions(basemaps = c("OpenStreetMap"))

f <- "/Users/julianflowers/Library/CloudStorage/Dropbox/My Mac (Julians-MBP-2)/Downloads/WB_GB105033037810_shapefile"

f_s <- fs::dir_ls(f, regexp = "shp")


granta <- sf::read_sf(f_s[1]) 

granta_catch <- sf::read_sf(f_s[2])

granta_buffer <- granta |>
  st_buffer(200)


mapview(granta_catch, col.regions = "skyblue") +
  mapview(granta_buffer, col.regions = "darkblue") +
  mapview(granta) 

```

## Classifications

Environment agency latest classification

## 




```{r classifications}
#| eval: true
library(rvest)
url <- "https://environment.data.gov.uk/catchment-planning/WaterBody/GB105033037810"

read_html(url) |>
  html_table() %>%
  .[[1]] |>
  knitr::kable()
```

```{r, eval=TRUE}

links <- myScrapers::get_page_links("https://environment.data.gov.uk/catchment-planning/WaterBody/GB105033037810") %>%
  .[grepl("Monitoring", .)] |>
  tibble::enframe() |>
  mutate(link = paste0("https://environment.data.gov.uk", value), 
         data = purrr::map(link, myScrapers::get_page_csvs)
         ) |>
  tidyr::unnest("data") |>
  mutate(csv = paste0("https://environment.data.gov.uk", data)) |>
  mutate(site_class = purrr::map(csv, readr::read_csv))

site_class <- links$site_class

```

## Monitoring points

```{r, eval = TRUE}
## convert EN to lat lon and add to map

lat_lon <- purrr::map_df(1:19, \(x) srUtils::decimal_from_en(easting = site_class[[x]]$`Site Easting`[1], northing = site_class[[x]]$`Site Northing`[1]))

site_class_sf <- purrr::map(1:19, \(x) lat_lon[x, ] |> sf::st_as_sf(coords = c("long", "lat"), crs = 4326))

site_class_sf |>
  #head()
  mapview(col.regions = "red") +
  mapview(granta) +
  mapview(granta_catch, col.regions = "skyblue")


```

```{r download-csv}

library(myScrapers)

csvs <- myScrapers::get_page_csvs("https://environment.data.gov.uk/catchment-planning/WaterBody/GB105033037810")

csv <- map(csvs, \(x) paste0("https://environment.data.gov.uk/", x)) 

csv <- map(csv, read_csv)


```

## River fly monitoring results

## Catchment rainfall

Use HAD 1km gridded daily rainfall data available 1869 - 2021 from the Met Office and calculate average rainfall across whole catchment

<https://data.ceda.ac.uk/badc/ukmo-hadobs/data/insitu/MOHC/HadOBS/HadUK-Grid/v1.1.0.0/1km/rainfall/day/>

```{r, eval=TRUE, cache=TRUE}

needs(stars, raster, fs, furrr)
seed = furrr_options(seed = 123)

p <- here::here("/Volumes/JF2/rainfall_data")

nc <- dir_ls(p)
r1 <- raster::stack(nc)

get_daily_rainfall <- function(raster){
  
  crop(raster, granta_catch) |>
  values() |>
  na.omit() |>
  mean()
  
}

date <- seq.Date(from = as.Date("2017-01-01"), to = as.Date("2021-12-31"), by = "day")

daily_rain <- future_map_dbl(1:1826, \(x) get_daily_rainfall(r1[[x]]) |> round(2), .options = seed, .progress = TRUE)

data.frame(date, daily_rain) |>
  mutate(monthly = zoo::as.yearmon(date)) |>
  group_by(monthly) |>
  summarise(rain_month = sum(daily_rain)) |>
  ggplot(aes(monthly, rain_month)) +
  geom_line() +
  geom_smooth(method = "loess", span = 0.3) +
  ggthemes::theme_economist() +
  zoo::scale_x_yearmon(n = 10) +
  labs(y = "Monthly rainfall (mm)", 
       title = "Monthly rainfall in Granta Catchment", 
       x = "") 
  
```

## River levels

Data from <https://nrfa.ceh.ac.uk/data/station/download?stn=33066&dt=cdr>

```{r, eval=TRUE,  cache=TRUE}
## granta river data from https://nrfa.ceh.ac.uk/data/station/download?stn=33066&dt=cdr
## linton min / max levels and daily flow rates
theme_set(ggthemes::theme_economist())

library(fs); library(qicharts2)
dir <- here::here("~/Downloads")

f <- list.files(dir, "csv", full.names = TRUE)

f

water_sheets <- map(f[c(33, 35)], read_csv)

ws <- water_sheets[[1]] |>
  group_by(yearmon = zoo::as.yearmon(date)) |>
  summarise(mean = mean(value, na.rm = TRUE),
            min = min(value, na.rm = TRUE),
            max = max(value, na.rm = TRUE),
            sd = sd(value, na.rm = TRUE)) |>
  ungroup() |>
  mutate(grand_mean = mean(mean, na.rm = TRUE),
         s = mean(sd, na.rm = TRUE)) |>
  drop_na()

ws |>
  ggplot(aes(yearmon, mean)) +
  geom_point() +
  geom_smooth(method = "loess", span = 0.2) +
  geom_hline(yintercept = ws$grand_mean, colour = "red") +
  labs(title = "Mean monthly minimum river level at Linton monitoring point")
  

```


```{r}

map(1:4, \(x) range(water_sheets[[x]]$date))

plots <- map(1:4, \(x) water_sheets[[x]] |> filter(quality == "Good") |> ggplot(aes(date, value)) + geom_line() + ggtitle(water_sheets[[x]]$type[1], subtitle = paste(range(water_sheets[[x]]$date)[1], "to", range(water_sheets[[x]]$date)[2])) )

plots[[2]]
  geom_smooth(method = "gam")

ws |>
  ggplot(aes(date, sd)) +
  geom_line()
```

```{r}
## flow

ws_flow_23 <- water_sheets[[1]] |>
  #filter(date >= "2023-01-01")
  mutate(ym = zoo::as.yearqtr(date)) |>
  group_by(ym) |>
  summarise(mean_flow = mean(value, na.rm = TRUE))

```


```{r}

ws_level_15_min <- water_sheets[[2]] |>
  group_by(date) |>
  summarise(mean_level = mean(value, na.rm = TRUE),
            sd_level = sd(value, na.rm = TRUE),
            min_level = ifelse(length(value) >0, min(value, na.rm = TRUE), Inf),
            max_level = ifelse(length(value) >0, max(value, na.rm = TRUE), Inf),
            n = n(),
            range = max_level - min_level)

ws_level_15_min |>
  ggplot(aes(date, mean_level)) +
  geom_point()


library(modeltime); library(timetk)
range(ws_level_15_min$date)

timetk::plot_time_series(ws_level_15_min, date, mean_level)

ws_ts <- ts(ws_level_15_min$mean_level, start = c(1996, 12, 2), end = c(2023, 6, 10), frequency = 365) 
na.omit(ws_ts)

decompose(ws_ts)

fit <- stl(ws_ts, s.window=12, na.action = na.omit)
plot(fit)

```


```{r}
## max level

ws_23 <- water_sheets[[3]] |>
  filter(date >= "2023-01-01")

full_join(ws_flow_23, ws_23, by = c("date", "dateTime")) |>
  ggplot(aes(value.x, value.y)) +
  geom_point() +
  geom_smooth() +
  labs(x = "flow",
       y = "max level")

qicharts2::qic(data = ws_23, y = value, x = date, chart = "i", decimals = 2, freeze = 120, title = "max level")
qicharts2::qic(data = ws_flow_23, y = value, x = date, chart = "i", decimals = 2, freeze = 120, title = "flow")


```
